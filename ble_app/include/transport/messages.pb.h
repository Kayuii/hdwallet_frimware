/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.0-dev at Thu Dec  6 15:21:24 2018. */

#ifndef PB_MESSAGES_PB_H_INCLUDED
#define PB_MESSAGES_PB_H_INCLUDED
#include <pb.h>

#include "types.pb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _MessageType {
    MessageType_MessageType_Initialize = 0,
    MessageType_MessageType_Ping = 1,
    MessageType_MessageType_Success = 2,
    MessageType_MessageType_Failure = 3,
    MessageType_MessageType_ChangePin = 4,
    MessageType_MessageType_WipeDevice = 5,
    MessageType_MessageType_FirmwareErase = 6,
    MessageType_MessageType_FirmwareUpload = 7,
    MessageType_MessageType_GetEntropy = 9,
    MessageType_MessageType_Entropy = 10,
    MessageType_MessageType_GetPublicKey = 11,
    MessageType_MessageType_PublicKey = 12,
    MessageType_MessageType_LoadDevice = 13,
    MessageType_MessageType_ResetDevice = 14,
    MessageType_MessageType_SignTx = 15,
    MessageType_MessageType_SimpleSignTx = 16,
    MessageType_MessageType_Features = 17,
    MessageType_MessageType_PinMatrixRequest = 18,
    MessageType_MessageType_PinMatrixAck = 19,
    MessageType_MessageType_Cancel = 20,
    MessageType_MessageType_TxRequest = 21,
    MessageType_MessageType_TxAck = 22,
    MessageType_MessageType_CipherKeyValue = 23,
    MessageType_MessageType_ClearSession = 24,
    MessageType_MessageType_ApplySettings = 25,
    MessageType_MessageType_ButtonRequest = 26,
    MessageType_MessageType_ButtonAck = 27,
    MessageType_MessageType_GetAddress = 29,
    MessageType_MessageType_Address = 30,
    MessageType_MessageType_EntropyRequest = 35,
    MessageType_MessageType_EntropyAck = 36,
    MessageType_MessageType_SignMessage = 38,
    MessageType_MessageType_VerifyMessage = 39,
    MessageType_MessageType_MessageSignature = 40,
    MessageType_MessageType_PassphraseRequest = 41,
    MessageType_MessageType_PassphraseAck = 42,
    MessageType_MessageType_EstimateTxSize = 43,
    MessageType_MessageType_TxSize = 44,
    MessageType_MessageType_RecoveryDevice = 45,
    MessageType_MessageType_WordRequest = 46,
    MessageType_MessageType_WordAck = 47,
    MessageType_MessageType_CipheredKeyValue = 48,
    MessageType_MessageType_EncryptMessage = 49,
    MessageType_MessageType_EncryptedMessage = 50,
    MessageType_MessageType_DecryptMessage = 51,
    MessageType_MessageType_DecryptedMessage = 52,
    MessageType_MessageType_SignIdentity = 53,
    MessageType_MessageType_SignedIdentity = 54,
    MessageType_MessageType_GetFeatures = 55,
    MessageType_MessageType_EthereumGetAddress = 56,
    MessageType_MessageType_EthereumAddress = 57,
    MessageType_MessageType_EthereumSignTx = 58,
    MessageType_MessageType_EthereumTxRequest = 59,
    MessageType_MessageType_EthereumTxAck = 60,
    MessageType_MessageType_CharacterRequest = 80,
    MessageType_MessageType_CharacterAck = 81,
    MessageType_MessageType_RawTxAck = 82,
    MessageType_MessageType_ApplyPolicies = 83,
    MessageType_MessageType_FlashHash = 84,
    MessageType_MessageType_FlashWrite = 85,
    MessageType_MessageType_FlashHashResponse = 86,
    MessageType_MessageType_DebugLinkFlashDump = 87,
    MessageType_MessageType_DebugLinkFlashDumpResponse = 88,
    MessageType_MessageType_SoftReset = 89,
    MessageType_MessageType_DebugLinkDecision = 100,
    MessageType_MessageType_DebugLinkGetState = 101,
    MessageType_MessageType_DebugLinkState = 102,
    MessageType_MessageType_DebugLinkStop = 103,
    MessageType_MessageType_DebugLinkLog = 104,
    MessageType_MessageType_DebugLinkFillConfig = 105,
    MessageType_MessageType_GetCoinTable = 106,
    MessageType_MessageType_CoinTable = 107,
    MessageType_MessageType_EthereumSignMessage = 108,
    MessageType_MessageType_EthereumVerifyMessage = 109,
    MessageType_MessageType_EthereumMessageSignature = 110
} MessageType;
#define _MessageType_MIN MessageType_MessageType_Initialize
#define _MessageType_MAX MessageType_MessageType_EthereumMessageSignature
#define _MessageType_ARRAYSIZE ((MessageType)(MessageType_MessageType_EthereumMessageSignature+1))

/* Struct definitions */
typedef struct _ButtonAck {
    char dummy_field;
/* @@protoc_insertion_point(struct:ButtonAck) */
} ButtonAck;

typedef struct _Cancel {
    char dummy_field;
/* @@protoc_insertion_point(struct:Cancel) */
} Cancel;

typedef struct _ClearSession {
    char dummy_field;
/* @@protoc_insertion_point(struct:ClearSession) */
} ClearSession;

typedef struct _DebugLinkFillConfig {
    char dummy_field;
/* @@protoc_insertion_point(struct:DebugLinkFillConfig) */
} DebugLinkFillConfig;

typedef struct _DebugLinkGetState {
    char dummy_field;
/* @@protoc_insertion_point(struct:DebugLinkGetState) */
} DebugLinkGetState;

typedef struct _DebugLinkStop {
    char dummy_field;
/* @@protoc_insertion_point(struct:DebugLinkStop) */
} DebugLinkStop;

typedef struct _EntropyRequest {
    char dummy_field;
/* @@protoc_insertion_point(struct:EntropyRequest) */
} EntropyRequest;

typedef struct _FirmwareErase {
    char dummy_field;
/* @@protoc_insertion_point(struct:FirmwareErase) */
} FirmwareErase;

typedef struct _GetFeatures {
    char dummy_field;
/* @@protoc_insertion_point(struct:GetFeatures) */
} GetFeatures;

typedef struct _Initialize {
    char dummy_field;
/* @@protoc_insertion_point(struct:Initialize) */
} Initialize;

typedef struct _PassphraseRequest {
    char dummy_field;
/* @@protoc_insertion_point(struct:PassphraseRequest) */
} PassphraseRequest;

typedef struct _SoftReset {
    char dummy_field;
/* @@protoc_insertion_point(struct:SoftReset) */
} SoftReset;

typedef struct _WipeDevice {
    char dummy_field;
/* @@protoc_insertion_point(struct:WipeDevice) */
} WipeDevice;

typedef struct _WordRequest {
    char dummy_field;
/* @@protoc_insertion_point(struct:WordRequest) */
} WordRequest;

typedef struct _Address {
    char address[130];
/* @@protoc_insertion_point(struct:Address) */
} Address;

typedef struct _ApplyPolicies {
    pb_size_t policy_count;
    PolicyType policy[16];
/* @@protoc_insertion_point(struct:ApplyPolicies) */
} ApplyPolicies;

typedef struct _ApplySettings {
    bool has_language;
    char language[17];
    bool has_label;
    char label[33];
    bool has_use_passphrase;
    bool use_passphrase;
    bool has_auto_lock_delay_ms;
    uint32_t auto_lock_delay_ms;
    bool has_u2f_counter;
    uint32_t u2f_counter;
/* @@protoc_insertion_point(struct:ApplySettings) */
} ApplySettings;

typedef struct _ButtonRequest {
    bool has_code;
    ButtonRequestType code;
    bool has_data;
    char data[256];
/* @@protoc_insertion_point(struct:ButtonRequest) */
} ButtonRequest;

typedef struct _ChangePin {
    bool has_remove;
    bool remove;
/* @@protoc_insertion_point(struct:ChangePin) */
} ChangePin;

typedef struct _CharacterAck {
    bool has_character;
    char character[2];
    bool has_delete;
    bool delete;
    bool has_done;
    bool done;
/* @@protoc_insertion_point(struct:CharacterAck) */
} CharacterAck;

typedef struct _CharacterRequest {
    uint32_t word_pos;
    uint32_t character_pos;
/* @@protoc_insertion_point(struct:CharacterRequest) */
} CharacterRequest;

typedef PB_BYTES_ARRAY_T(1024) CipherKeyValue_value_t;
typedef PB_BYTES_ARRAY_T(16) CipherKeyValue_iv_t;
typedef struct _CipherKeyValue {
    pb_size_t address_n_count;
    uint32_t address_n[8];
    bool has_key;
    char key[256];
    bool has_value;
    CipherKeyValue_value_t value;
    bool has_encrypt;
    bool encrypt;
    bool has_ask_on_encrypt;
    bool ask_on_encrypt;
    bool has_ask_on_decrypt;
    bool ask_on_decrypt;
    bool has_iv;
    CipherKeyValue_iv_t iv;
/* @@protoc_insertion_point(struct:CipherKeyValue) */
} CipherKeyValue;

typedef PB_BYTES_ARRAY_T(1024) CipheredKeyValue_value_t;
typedef struct _CipheredKeyValue {
    bool has_value;
    CipheredKeyValue_value_t value;
/* @@protoc_insertion_point(struct:CipheredKeyValue) */
} CipheredKeyValue;

typedef struct _CoinTable {
    pb_size_t table_count;
    CoinType table[24];
    bool has_num_coins;
    uint32_t num_coins;
    bool has_chunk_size;
    uint32_t chunk_size;
/* @@protoc_insertion_point(struct:CoinTable) */
} CoinTable;

typedef struct _DebugLinkDecision {
    bool yes_no;
/* @@protoc_insertion_point(struct:DebugLinkDecision) */
} DebugLinkDecision;

typedef struct _DebugLinkFlashDump {
    bool has_address;
    uint32_t address;
    bool has_length;
    uint32_t length;
/* @@protoc_insertion_point(struct:DebugLinkFlashDump) */
} DebugLinkFlashDump;

typedef PB_BYTES_ARRAY_T(1024) DebugLinkFlashDumpResponse_data_t;
typedef struct _DebugLinkFlashDumpResponse {
    bool has_data;
    DebugLinkFlashDumpResponse_data_t data;
/* @@protoc_insertion_point(struct:DebugLinkFlashDumpResponse) */
} DebugLinkFlashDumpResponse;

typedef struct _DebugLinkLog {
    bool has_level;
    uint32_t level;
    bool has_bucket;
    char bucket[33];
    bool has_text;
    char text[256];
/* @@protoc_insertion_point(struct:DebugLinkLog) */
} DebugLinkLog;

typedef PB_BYTES_ARRAY_T(1024) DebugLinkState_layout_t;
typedef PB_BYTES_ARRAY_T(128) DebugLinkState_reset_entropy_t;
typedef PB_BYTES_ARRAY_T(32) DebugLinkState_firmware_hash_t;
typedef PB_BYTES_ARRAY_T(32) DebugLinkState_storage_hash_t;
typedef struct _DebugLinkState {
    bool has_layout;
    DebugLinkState_layout_t layout;
    bool has_pin;
    char pin[10];
    bool has_matrix;
    char matrix[10];
    bool has_mnemonic;
    char mnemonic[241];
    bool has_node;
    HDNodeType node;
    bool has_passphrase_protection;
    bool passphrase_protection;
    bool has_reset_word;
    char reset_word[133];
    bool has_reset_entropy;
    DebugLinkState_reset_entropy_t reset_entropy;
    bool has_recovery_fake_word;
    char recovery_fake_word[12];
    bool has_recovery_word_pos;
    uint32_t recovery_word_pos;
    bool has_recovery_cipher;
    char recovery_cipher[27];
    bool has_recovery_auto_completed_word;
    char recovery_auto_completed_word[12];
    bool has_firmware_hash;
    DebugLinkState_firmware_hash_t firmware_hash;
    bool has_storage_hash;
    DebugLinkState_storage_hash_t storage_hash;
/* @@protoc_insertion_point(struct:DebugLinkState) */
} DebugLinkState;

typedef PB_BYTES_ARRAY_T(33) DecryptMessage_nonce_t;
typedef PB_BYTES_ARRAY_T(1120) DecryptMessage_message_t;
typedef PB_BYTES_ARRAY_T(8) DecryptMessage_hmac_t;
typedef struct _DecryptMessage {
    pb_size_t address_n_count;
    uint32_t address_n[8];
    bool has_nonce;
    DecryptMessage_nonce_t nonce;
    bool has_message;
    DecryptMessage_message_t message;
    bool has_hmac;
    DecryptMessage_hmac_t hmac;
/* @@protoc_insertion_point(struct:DecryptMessage) */
} DecryptMessage;

typedef PB_BYTES_ARRAY_T(1024) DecryptedMessage_message_t;
typedef struct _DecryptedMessage {
    bool has_message;
    DecryptedMessage_message_t message;
    bool has_address;
    char address[130];
/* @@protoc_insertion_point(struct:DecryptedMessage) */
} DecryptedMessage;

typedef PB_BYTES_ARRAY_T(33) EncryptMessage_pubkey_t;
typedef PB_BYTES_ARRAY_T(1024) EncryptMessage_message_t;
typedef struct _EncryptMessage {
    bool has_pubkey;
    EncryptMessage_pubkey_t pubkey;
    bool has_message;
    EncryptMessage_message_t message;
    bool has_display_only;
    bool display_only;
    pb_size_t address_n_count;
    uint32_t address_n[8];
    bool has_coin_name;
    char coin_name[21];
/* @@protoc_insertion_point(struct:EncryptMessage) */
} EncryptMessage;

typedef PB_BYTES_ARRAY_T(33) EncryptedMessage_nonce_t;
typedef PB_BYTES_ARRAY_T(1120) EncryptedMessage_message_t;
typedef PB_BYTES_ARRAY_T(8) EncryptedMessage_hmac_t;
typedef struct _EncryptedMessage {
    bool has_nonce;
    EncryptedMessage_nonce_t nonce;
    bool has_message;
    EncryptedMessage_message_t message;
    bool has_hmac;
    EncryptedMessage_hmac_t hmac;
/* @@protoc_insertion_point(struct:EncryptedMessage) */
} EncryptedMessage;

typedef PB_BYTES_ARRAY_T(1024) Entropy_entropy_t;
typedef struct _Entropy {
    Entropy_entropy_t entropy;
/* @@protoc_insertion_point(struct:Entropy) */
} Entropy;

typedef PB_BYTES_ARRAY_T(128) EntropyAck_entropy_t;
typedef struct _EntropyAck {
    bool has_entropy;
    EntropyAck_entropy_t entropy;
/* @@protoc_insertion_point(struct:EntropyAck) */
} EntropyAck;

typedef struct _EstimateTxSize {
    uint32_t outputs_count;
    uint32_t inputs_count;
    pb_callback_t coin_name;
/* @@protoc_insertion_point(struct:EstimateTxSize) */
} EstimateTxSize;

typedef PB_BYTES_ARRAY_T(20) EthereumAddress_address_t;
typedef struct _EthereumAddress {
    EthereumAddress_address_t address;
/* @@protoc_insertion_point(struct:EthereumAddress) */
} EthereumAddress;

typedef struct _EthereumGetAddress {
    pb_size_t address_n_count;
    uint32_t address_n[8];
    bool has_show_display;
    bool show_display;
/* @@protoc_insertion_point(struct:EthereumGetAddress) */
} EthereumGetAddress;

typedef PB_BYTES_ARRAY_T(20) EthereumMessageSignature_address_t;
typedef PB_BYTES_ARRAY_T(65) EthereumMessageSignature_signature_t;
typedef struct _EthereumMessageSignature {
    bool has_address;
    EthereumMessageSignature_address_t address;
    bool has_signature;
    EthereumMessageSignature_signature_t signature;
/* @@protoc_insertion_point(struct:EthereumMessageSignature) */
} EthereumMessageSignature;

typedef PB_BYTES_ARRAY_T(1024) EthereumSignMessage_message_t;
typedef struct _EthereumSignMessage {
    pb_size_t address_n_count;
    uint32_t address_n[8];
    EthereumSignMessage_message_t message;
/* @@protoc_insertion_point(struct:EthereumSignMessage) */
} EthereumSignMessage;

typedef PB_BYTES_ARRAY_T(32) EthereumSignTx_nonce_t;
typedef PB_BYTES_ARRAY_T(32) EthereumSignTx_gas_price_t;
typedef PB_BYTES_ARRAY_T(32) EthereumSignTx_gas_limit_t;
typedef PB_BYTES_ARRAY_T(20) EthereumSignTx_to_t;
typedef PB_BYTES_ARRAY_T(32) EthereumSignTx_value_t;
typedef PB_BYTES_ARRAY_T(1024) EthereumSignTx_data_initial_chunk_t;
typedef PB_BYTES_ARRAY_T(32) EthereumSignTx_token_value_t;
typedef PB_BYTES_ARRAY_T(20) EthereumSignTx_token_to_t;
typedef struct _EthereumSignTx {
    pb_size_t address_n_count;
    uint32_t address_n[8];
    bool has_nonce;
    EthereumSignTx_nonce_t nonce;
    bool has_gas_price;
    EthereumSignTx_gas_price_t gas_price;
    bool has_gas_limit;
    EthereumSignTx_gas_limit_t gas_limit;
    bool has_to;
    EthereumSignTx_to_t to;
    bool has_value;
    EthereumSignTx_value_t value;
    bool has_data_initial_chunk;
    EthereumSignTx_data_initial_chunk_t data_initial_chunk;
    bool has_data_length;
    uint32_t data_length;
    pb_size_t to_address_n_count;
    uint32_t to_address_n[8];
    bool has_address_type;
    OutputAddressType address_type;
    bool has_exchange_type;
    ExchangeType exchange_type;
    bool has_chain_id;
    uint32_t chain_id;
    bool has_token_value;
    EthereumSignTx_token_value_t token_value;
    bool has_token_to;
    EthereumSignTx_token_to_t token_to;
    bool has_token_shortcut;
    char token_shortcut[8];
    bool has_tx_type;
    uint32_t tx_type;
/* @@protoc_insertion_point(struct:EthereumSignTx) */
} EthereumSignTx;

typedef PB_BYTES_ARRAY_T(1024) EthereumTxAck_data_chunk_t;
typedef struct _EthereumTxAck {
    bool has_data_chunk;
    EthereumTxAck_data_chunk_t data_chunk;
/* @@protoc_insertion_point(struct:EthereumTxAck) */
} EthereumTxAck;

typedef PB_BYTES_ARRAY_T(32) EthereumTxRequest_signature_r_t;
typedef PB_BYTES_ARRAY_T(32) EthereumTxRequest_signature_s_t;
typedef PB_BYTES_ARRAY_T(32) EthereumTxRequest_hash_t;
typedef PB_BYTES_ARRAY_T(73) EthereumTxRequest_signature_der_t;
typedef struct _EthereumTxRequest {
    bool has_data_length;
    uint32_t data_length;
    bool has_signature_v;
    uint32_t signature_v;
    bool has_signature_r;
    EthereumTxRequest_signature_r_t signature_r;
    bool has_signature_s;
    EthereumTxRequest_signature_s_t signature_s;
    bool has_hash;
    EthereumTxRequest_hash_t hash;
    bool has_signature_der;
    EthereumTxRequest_signature_der_t signature_der;
/* @@protoc_insertion_point(struct:EthereumTxRequest) */
} EthereumTxRequest;

typedef PB_BYTES_ARRAY_T(20) EthereumVerifyMessage_address_t;
typedef PB_BYTES_ARRAY_T(65) EthereumVerifyMessage_signature_t;
typedef PB_BYTES_ARRAY_T(1024) EthereumVerifyMessage_message_t;
typedef struct _EthereumVerifyMessage {
    bool has_address;
    EthereumVerifyMessage_address_t address;
    bool has_signature;
    EthereumVerifyMessage_signature_t signature;
    bool has_message;
    EthereumVerifyMessage_message_t message;
/* @@protoc_insertion_point(struct:EthereumVerifyMessage) */
} EthereumVerifyMessage;

typedef struct _Failure {
    bool has_code;
    FailureType code;
    bool has_message;
    char message[256];
/* @@protoc_insertion_point(struct:Failure) */
} Failure;

typedef PB_BYTES_ARRAY_T(41) Features_revision_t;
typedef PB_BYTES_ARRAY_T(32) Features_bootloader_hash_t;
typedef PB_BYTES_ARRAY_T(32) Features_firmware_hash_t;
typedef struct _Features {
    bool has_vendor;
    char vendor[33];
    bool has_major_version;
    uint32_t major_version;
    bool has_minor_version;
    uint32_t minor_version;
    bool has_patch_version;
    uint32_t patch_version;
    bool has_bootloader_mode;
    bool bootloader_mode;
    bool has_device_id;
    char device_id[25];
    bool has_pin_protection;
    bool pin_protection;
    bool has_passphrase_protection;
    bool passphrase_protection;
    bool has_language;
    char language[17];
    bool has_label;
    char label[33];
    pb_size_t coins_count;
    CoinType coins[0];
    bool has_initialized;
    bool initialized;
    bool has_revision;
    Features_revision_t revision;
    bool has_bootloader_hash;
    Features_bootloader_hash_t bootloader_hash;
    bool has_imported;
    bool imported;
    bool has_pin_cached;
    bool pin_cached;
    bool has_passphrase_cached;
    bool passphrase_cached;
    pb_size_t policies_count;
    PolicyType policies[4];
    bool has_model;
    char model[32];
    bool has_firmware_variant;
    char firmware_variant[32];
    bool has_firmware_hash;
    Features_firmware_hash_t firmware_hash;
    bool has_no_backup;
    bool no_backup;
/* @@protoc_insertion_point(struct:Features) */
} Features;

typedef PB_BYTES_ARRAY_T(32) FirmwareUpload_payload_hash_t;
typedef PB_BYTES_ARRAY_T(0) FirmwareUpload_payload_t;
typedef struct _FirmwareUpload {
    FirmwareUpload_payload_hash_t payload_hash;
    FirmwareUpload_payload_t payload;
/* @@protoc_insertion_point(struct:FirmwareUpload) */
} FirmwareUpload;

typedef PB_BYTES_ARRAY_T(32) FlashHash_challenge_t;
typedef struct _FlashHash {
    bool has_address;
    uint32_t address;
    bool has_length;
    uint32_t length;
    bool has_challenge;
    FlashHash_challenge_t challenge;
/* @@protoc_insertion_point(struct:FlashHash) */
} FlashHash;

typedef PB_BYTES_ARRAY_T(32) FlashHashResponse_data_t;
typedef struct _FlashHashResponse {
    bool has_data;
    FlashHashResponse_data_t data;
/* @@protoc_insertion_point(struct:FlashHashResponse) */
} FlashHashResponse;

typedef PB_BYTES_ARRAY_T(1024) FlashWrite_data_t;
typedef struct _FlashWrite {
    bool has_address;
    uint32_t address;
    bool has_data;
    FlashWrite_data_t data;
    bool has_erase;
    bool erase;
/* @@protoc_insertion_point(struct:FlashWrite) */
} FlashWrite;

typedef struct _GetAddress {
    pb_size_t address_n_count;
    uint32_t address_n[8];
    bool has_coin_name;
    char coin_name[21];
    bool has_show_display;
    bool show_display;
    bool has_multisig;
    MultisigRedeemScriptType multisig;
    bool has_script_type;
    InputScriptType script_type;
/* @@protoc_insertion_point(struct:GetAddress) */
} GetAddress;

typedef struct _GetCoinTable {
    bool has_start;
    uint32_t start;
    bool has_end;
    uint32_t end;
/* @@protoc_insertion_point(struct:GetCoinTable) */
} GetCoinTable;

typedef struct _GetEntropy {
    uint32_t size;
/* @@protoc_insertion_point(struct:GetEntropy) */
} GetEntropy;

typedef struct _GetPublicKey {
    pb_size_t address_n_count;
    uint32_t address_n[8];
    bool has_ecdsa_curve_name;
    char ecdsa_curve_name[32];
    bool has_show_display;
    bool show_display;
    bool has_coin_name;
    char coin_name[21];
    bool has_script_type;
    InputScriptType script_type;
/* @@protoc_insertion_point(struct:GetPublicKey) */
} GetPublicKey;

typedef struct _LoadDevice {
    bool has_mnemonic;
    char mnemonic[241];
    bool has_node;
    HDNodeType node;
    bool has_pin;
    char pin[10];
    bool has_passphrase_protection;
    bool passphrase_protection;
    bool has_language;
    char language[17];
    bool has_label;
    char label[33];
    bool has_skip_checksum;
    bool skip_checksum;
    bool has_u2f_counter;
    uint32_t u2f_counter;
/* @@protoc_insertion_point(struct:LoadDevice) */
} LoadDevice;

typedef PB_BYTES_ARRAY_T(65) MessageSignature_signature_t;
typedef struct _MessageSignature {
    bool has_address;
    char address[130];
    bool has_signature;
    MessageSignature_signature_t signature;
/* @@protoc_insertion_point(struct:MessageSignature) */
} MessageSignature;

typedef struct _PassphraseAck {
    char passphrase[51];
/* @@protoc_insertion_point(struct:PassphraseAck) */
} PassphraseAck;

typedef struct _PinMatrixAck {
    char pin[10];
/* @@protoc_insertion_point(struct:PinMatrixAck) */
} PinMatrixAck;

typedef struct _PinMatrixRequest {
    bool has_type;
    PinMatrixRequestType type;
/* @@protoc_insertion_point(struct:PinMatrixRequest) */
} PinMatrixRequest;

typedef struct _Ping {
    bool has_message;
    char message[256];
    bool has_button_protection;
    bool button_protection;
    bool has_pin_protection;
    bool pin_protection;
    bool has_passphrase_protection;
    bool passphrase_protection;
/* @@protoc_insertion_point(struct:Ping) */
} Ping;

typedef struct _PublicKey {
    HDNodeType node;
    bool has_xpub;
    char xpub[113];
/* @@protoc_insertion_point(struct:PublicKey) */
} PublicKey;

typedef struct _RawTxAck {
    bool has_tx;
    RawTransactionType tx;
/* @@protoc_insertion_point(struct:RawTxAck) */
} RawTxAck;

typedef struct _RecoveryDevice {
    bool has_word_count;
    uint32_t word_count;
    bool has_passphrase_protection;
    bool passphrase_protection;
    bool has_pin_protection;
    bool pin_protection;
    bool has_language;
    char language[17];
    bool has_label;
    char label[33];
    bool has_enforce_wordlist;
    bool enforce_wordlist;
    bool has_use_character_cipher;
    bool use_character_cipher;
    bool has_auto_lock_delay_ms;
    uint32_t auto_lock_delay_ms;
    bool has_u2f_counter;
    uint32_t u2f_counter;
    bool has_dry_run;
    bool dry_run;
/* @@protoc_insertion_point(struct:RecoveryDevice) */
} RecoveryDevice;

typedef struct _ResetDevice {
    bool has_display_random;
    bool display_random;
    bool has_strength;
    uint32_t strength;
    bool has_passphrase_protection;
    bool passphrase_protection;
    bool has_pin_protection;
    bool pin_protection;
    bool has_language;
    char language[17];
    bool has_label;
    char label[33];
    bool has_no_backup;
    bool no_backup;
    bool has_auto_lock_delay_ms;
    uint32_t auto_lock_delay_ms;
/* @@protoc_insertion_point(struct:ResetDevice) */
} ResetDevice;

typedef PB_BYTES_ARRAY_T(256) SignIdentity_challenge_hidden_t;
typedef struct _SignIdentity {
    bool has_identity;
    IdentityType identity;
    bool has_challenge_hidden;
    SignIdentity_challenge_hidden_t challenge_hidden;
    bool has_challenge_visual;
    char challenge_visual[256];
    bool has_ecdsa_curve_name;
    char ecdsa_curve_name[32];
/* @@protoc_insertion_point(struct:SignIdentity) */
} SignIdentity;

typedef PB_BYTES_ARRAY_T(1024) SignMessage_message_t;
typedef struct _SignMessage {
    pb_size_t address_n_count;
    uint32_t address_n[8];
    SignMessage_message_t message;
    bool has_coin_name;
    char coin_name[21];
    bool has_script_type;
    InputScriptType script_type;
/* @@protoc_insertion_point(struct:SignMessage) */
} SignMessage;

typedef struct _SignTx {
    uint32_t outputs_count;
    uint32_t inputs_count;
    bool has_coin_name;
    char coin_name[21];
    bool has_version;
    uint32_t version;
    bool has_lock_time;
    uint32_t lock_time;
    bool has_expiry;
    uint32_t expiry;
    bool has_overwintered;
    bool overwintered;
    bool has_version_group_id;
    uint32_t version_group_id;
/* @@protoc_insertion_point(struct:SignTx) */
} SignTx;

typedef PB_BYTES_ARRAY_T(33) SignedIdentity_public_key_t;
typedef PB_BYTES_ARRAY_T(65) SignedIdentity_signature_t;
typedef struct _SignedIdentity {
    bool has_address;
    char address[130];
    bool has_public_key;
    SignedIdentity_public_key_t public_key;
    bool has_signature;
    SignedIdentity_signature_t signature;
/* @@protoc_insertion_point(struct:SignedIdentity) */
} SignedIdentity;

typedef struct _SimpleSignTx {
    pb_callback_t inputs;
    pb_callback_t outputs;
    pb_callback_t transactions;
    pb_callback_t coin_name;
    bool has_version;
    uint32_t version;
    bool has_lock_time;
    uint32_t lock_time;
    bool has_expiry;
    uint32_t expiry;
    bool has_overwintered;
    bool overwintered;
/* @@protoc_insertion_point(struct:SimpleSignTx) */
} SimpleSignTx;

typedef struct _Success {
    bool has_message;
    char message[256];
/* @@protoc_insertion_point(struct:Success) */
} Success;

typedef struct _TxAck {
    bool has_tx;
    TransactionType tx;
/* @@protoc_insertion_point(struct:TxAck) */
} TxAck;

typedef struct _TxRequest {
    bool has_request_type;
    RequestType request_type;
    bool has_details;
    TxRequestDetailsType details;
    bool has_serialized;
    TxRequestSerializedType serialized;
/* @@protoc_insertion_point(struct:TxRequest) */
} TxRequest;

typedef struct _TxSize {
    bool has_tx_size;
    uint32_t tx_size;
/* @@protoc_insertion_point(struct:TxSize) */
} TxSize;

typedef PB_BYTES_ARRAY_T(65) VerifyMessage_signature_t;
typedef PB_BYTES_ARRAY_T(1024) VerifyMessage_message_t;
typedef struct _VerifyMessage {
    bool has_address;
    char address[130];
    bool has_signature;
    VerifyMessage_signature_t signature;
    bool has_message;
    VerifyMessage_message_t message;
    bool has_coin_name;
    char coin_name[21];
/* @@protoc_insertion_point(struct:VerifyMessage) */
} VerifyMessage;

typedef struct _WordAck {
    char word[12];
/* @@protoc_insertion_point(struct:WordAck) */
} WordAck;

/* Default values for struct fields */
extern const char GetPublicKey_coin_name_default[21];
extern const InputScriptType GetPublicKey_script_type_default;
extern const char GetAddress_coin_name_default[21];
extern const InputScriptType GetAddress_script_type_default;
extern const char LoadDevice_language_default[17];
extern const uint32_t ResetDevice_strength_default;
extern const char ResetDevice_language_default[17];
extern const char RecoveryDevice_language_default[17];
extern const char SignMessage_coin_name_default[21];
extern const InputScriptType SignMessage_script_type_default;
extern const char VerifyMessage_coin_name_default[21];
extern const char EncryptMessage_coin_name_default[21];
extern const char SignTx_coin_name_default[21];
extern const uint32_t SignTx_version_default;
extern const uint32_t SignTx_lock_time_default;
extern const uint32_t SimpleSignTx_version_default;
extern const uint32_t SimpleSignTx_lock_time_default;

/* Initializer values for message structs */
#define Initialize_init_default                  {0}
#define GetFeatures_init_default                 {0}
#define Features_init_default                    {false, "", false, 0, false, 0, false, 0, false, 0, false, "", false, 0, false, 0, false, "", false, "", 0, {}, false, 0, false, {0, {0}}, false, {0, {0}}, false, 0, false, 0, false, 0, 0, {PolicyType_init_default, PolicyType_init_default, PolicyType_init_default, PolicyType_init_default}, false, "", false, "", false, {0, {0}}, false, 0}
#define GetCoinTable_init_default                {false, 0, false, 0}
#define CoinTable_init_default                   {0, {CoinType_init_default, CoinType_init_default, CoinType_init_default, CoinType_init_default, CoinType_init_default, CoinType_init_default, CoinType_init_default, CoinType_init_default, CoinType_init_default, CoinType_init_default, CoinType_init_default, CoinType_init_default, CoinType_init_default, CoinType_init_default, CoinType_init_default, CoinType_init_default, CoinType_init_default, CoinType_init_default, CoinType_init_default, CoinType_init_default, CoinType_init_default, CoinType_init_default, CoinType_init_default, CoinType_init_default}, false, 0, false, 0}
#define ClearSession_init_default                {0}
#define ApplySettings_init_default               {false, "", false, "", false, 0, false, 0, false, 0}
#define ChangePin_init_default                   {false, 0}
#define Ping_init_default                        {false, "", false, 0, false, 0, false, 0}
#define Success_init_default                     {false, ""}
#define Failure_init_default                     {false, _FailureType_MIN, false, ""}
#define ButtonRequest_init_default               {false, _ButtonRequestType_MIN, false, ""}
#define ButtonAck_init_default                   {0}
#define PinMatrixRequest_init_default            {false, _PinMatrixRequestType_MIN}
#define PinMatrixAck_init_default                {""}
#define Cancel_init_default                      {0}
#define PassphraseRequest_init_default           {0}
#define PassphraseAck_init_default               {""}
#define GetEntropy_init_default                  {0}
#define Entropy_init_default                     {{0, {0}}}
#define GetPublicKey_init_default                {0, {0, 0, 0, 0, 0, 0, 0, 0}, false, "", false, 0, false, "Bitcoin", false, InputScriptType_SPENDADDRESS}
#define PublicKey_init_default                   {HDNodeType_init_default, false, ""}
#define GetAddress_init_default                  {0, {0, 0, 0, 0, 0, 0, 0, 0}, false, "Bitcoin", false, 0, false, MultisigRedeemScriptType_init_default, false, InputScriptType_SPENDADDRESS}
#define EthereumGetAddress_init_default          {0, {0, 0, 0, 0, 0, 0, 0, 0}, false, 0}
#define Address_init_default                     {""}
#define EthereumAddress_init_default             {{0, {0}}}
#define WipeDevice_init_default                  {0}
#define LoadDevice_init_default                  {false, "", false, HDNodeType_init_default, false, "", false, 0, false, "english", false, "", false, 0, false, 0}
#define ResetDevice_init_default                 {false, 0, false, 256u, false, 0, false, 0, false, "english", false, "", false, 0, false, 0}
#define EntropyRequest_init_default              {0}
#define EntropyAck_init_default                  {false, {0, {0}}}
#define RecoveryDevice_init_default              {false, 0, false, 0, false, 0, false, "english", false, "", false, 0, false, 0, false, 0, false, 0, false, 0}
#define WordRequest_init_default                 {0}
#define WordAck_init_default                     {""}
#define CharacterRequest_init_default            {0, 0}
#define CharacterAck_init_default                {false, "", false, 0, false, 0}
#define SignMessage_init_default                 {0, {0, 0, 0, 0, 0, 0, 0, 0}, {0, {0}}, false, "Bitcoin", false, InputScriptType_SPENDADDRESS}
#define VerifyMessage_init_default               {false, "", false, {0, {0}}, false, {0, {0}}, false, "Bitcoin"}
#define MessageSignature_init_default            {false, "", false, {0, {0}}}
#define EncryptMessage_init_default              {false, {0, {0}}, false, {0, {0}}, false, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}, false, "Bitcoin"}
#define EncryptedMessage_init_default            {false, {0, {0}}, false, {0, {0}}, false, {0, {0}}}
#define DecryptMessage_init_default              {0, {0, 0, 0, 0, 0, 0, 0, 0}, false, {0, {0}}, false, {0, {0}}, false, {0, {0}}}
#define DecryptedMessage_init_default            {false, {0, {0}}, false, ""}
#define CipherKeyValue_init_default              {0, {0, 0, 0, 0, 0, 0, 0, 0}, false, "", false, {0, {0}}, false, 0, false, 0, false, 0, false, {0, {0}}}
#define CipheredKeyValue_init_default            {false, {0, {0}}}
#define EstimateTxSize_init_default              {0, 0, {{NULL}, NULL}}
#define TxSize_init_default                      {false, 0}
#define SignTx_init_default                      {0, 0, false, "Bitcoin", false, 1u, false, 0u, false, 0, false, 0, false, 0}
#define SimpleSignTx_init_default                {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, 1u, false, 0u, false, 0, false, 0}
#define TxRequest_init_default                   {false, _RequestType_MIN, false, TxRequestDetailsType_init_default, false, TxRequestSerializedType_init_default}
#define TxAck_init_default                       {false, TransactionType_init_default}
#define RawTxAck_init_default                    {false, RawTransactionType_init_default}
#define EthereumSignTx_init_default              {0, {0, 0, 0, 0, 0, 0, 0, 0}, false, {0, {0}}, false, {0, {0}}, false, {0, {0}}, false, {0, {0}}, false, {0, {0}}, false, {0, {0}}, false, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}, false, _OutputAddressType_MIN, false, ExchangeType_init_default, false, 0, false, {0, {0}}, false, {0, {0}}, false, "", false, 0}
#define EthereumTxRequest_init_default           {false, 0, false, 0, false, {0, {0}}, false, {0, {0}}, false, {0, {0}}, false, {0, {0}}}
#define EthereumTxAck_init_default               {false, {0, {0}}}
#define EthereumSignMessage_init_default         {0, {0, 0, 0, 0, 0, 0, 0, 0}, {0, {0}}}
#define EthereumVerifyMessage_init_default       {false, {0, {0}}, false, {0, {0}}, false, {0, {0}}}
#define EthereumMessageSignature_init_default    {false, {0, {0}}, false, {0, {0}}}
#define SignIdentity_init_default                {false, IdentityType_init_default, false, {0, {0}}, false, "", false, ""}
#define SignedIdentity_init_default              {false, "", false, {0, {0}}, false, {0, {0}}}
#define ApplyPolicies_init_default               {0, {PolicyType_init_default, PolicyType_init_default, PolicyType_init_default, PolicyType_init_default, PolicyType_init_default, PolicyType_init_default, PolicyType_init_default, PolicyType_init_default, PolicyType_init_default, PolicyType_init_default, PolicyType_init_default, PolicyType_init_default, PolicyType_init_default, PolicyType_init_default, PolicyType_init_default, PolicyType_init_default}}
#define FlashHash_init_default                   {false, 0, false, 0, false, {0, {0}}}
#define FlashWrite_init_default                  {false, 0, false, {0, {0}}, false, 0}
#define FlashHashResponse_init_default           {false, {0, {0}}}
#define DebugLinkFlashDump_init_default          {false, 0, false, 0}
#define DebugLinkFlashDumpResponse_init_default  {false, {0, {0}}}
#define SoftReset_init_default                   {0}
#define FirmwareErase_init_default               {0}
#define FirmwareUpload_init_default              {{0, {0}}, {0, {0}}}
#define DebugLinkDecision_init_default           {0}
#define DebugLinkGetState_init_default           {0}
#define DebugLinkState_init_default              {false, {0, {0}}, false, "", false, "", false, "", false, HDNodeType_init_default, false, 0, false, "", false, {0, {0}}, false, "", false, 0, false, "", false, "", false, {0, {0}}, false, {0, {0}}}
#define DebugLinkStop_init_default               {0}
#define DebugLinkLog_init_default                {false, 0, false, "", false, ""}
#define DebugLinkFillConfig_init_default         {0}
#define Initialize_init_zero                     {0}
#define GetFeatures_init_zero                    {0}
#define Features_init_zero                       {false, "", false, 0, false, 0, false, 0, false, 0, false, "", false, 0, false, 0, false, "", false, "", 0, {}, false, 0, false, {0, {0}}, false, {0, {0}}, false, 0, false, 0, false, 0, 0, {PolicyType_init_zero, PolicyType_init_zero, PolicyType_init_zero, PolicyType_init_zero}, false, "", false, "", false, {0, {0}}, false, 0}
#define GetCoinTable_init_zero                   {false, 0, false, 0}
#define CoinTable_init_zero                      {0, {CoinType_init_zero, CoinType_init_zero, CoinType_init_zero, CoinType_init_zero, CoinType_init_zero, CoinType_init_zero, CoinType_init_zero, CoinType_init_zero, CoinType_init_zero, CoinType_init_zero, CoinType_init_zero, CoinType_init_zero, CoinType_init_zero, CoinType_init_zero, CoinType_init_zero, CoinType_init_zero, CoinType_init_zero, CoinType_init_zero, CoinType_init_zero, CoinType_init_zero, CoinType_init_zero, CoinType_init_zero, CoinType_init_zero, CoinType_init_zero}, false, 0, false, 0}
#define ClearSession_init_zero                   {0}
#define ApplySettings_init_zero                  {false, "", false, "", false, 0, false, 0, false, 0}
#define ChangePin_init_zero                      {false, 0}
#define Ping_init_zero                           {false, "", false, 0, false, 0, false, 0}
#define Success_init_zero                        {false, ""}
#define Failure_init_zero                        {false, _FailureType_MIN, false, ""}
#define ButtonRequest_init_zero                  {false, _ButtonRequestType_MIN, false, ""}
#define ButtonAck_init_zero                      {0}
#define PinMatrixRequest_init_zero               {false, _PinMatrixRequestType_MIN}
#define PinMatrixAck_init_zero                   {""}
#define Cancel_init_zero                         {0}
#define PassphraseRequest_init_zero              {0}
#define PassphraseAck_init_zero                  {""}
#define GetEntropy_init_zero                     {0}
#define Entropy_init_zero                        {{0, {0}}}
#define GetPublicKey_init_zero                   {0, {0, 0, 0, 0, 0, 0, 0, 0}, false, "", false, 0, false, "", false, _InputScriptType_MIN}
#define PublicKey_init_zero                      {HDNodeType_init_zero, false, ""}
#define GetAddress_init_zero                     {0, {0, 0, 0, 0, 0, 0, 0, 0}, false, "", false, 0, false, MultisigRedeemScriptType_init_zero, false, _InputScriptType_MIN}
#define EthereumGetAddress_init_zero             {0, {0, 0, 0, 0, 0, 0, 0, 0}, false, 0}
#define Address_init_zero                        {""}
#define EthereumAddress_init_zero                {{0, {0}}}
#define WipeDevice_init_zero                     {0}
#define LoadDevice_init_zero                     {false, "", false, HDNodeType_init_zero, false, "", false, 0, false, "", false, "", false, 0, false, 0}
#define ResetDevice_init_zero                    {false, 0, false, 0, false, 0, false, 0, false, "", false, "", false, 0, false, 0}
#define EntropyRequest_init_zero                 {0}
#define EntropyAck_init_zero                     {false, {0, {0}}}
#define RecoveryDevice_init_zero                 {false, 0, false, 0, false, 0, false, "", false, "", false, 0, false, 0, false, 0, false, 0, false, 0}
#define WordRequest_init_zero                    {0}
#define WordAck_init_zero                        {""}
#define CharacterRequest_init_zero               {0, 0}
#define CharacterAck_init_zero                   {false, "", false, 0, false, 0}
#define SignMessage_init_zero                    {0, {0, 0, 0, 0, 0, 0, 0, 0}, {0, {0}}, false, "", false, _InputScriptType_MIN}
#define VerifyMessage_init_zero                  {false, "", false, {0, {0}}, false, {0, {0}}, false, ""}
#define MessageSignature_init_zero               {false, "", false, {0, {0}}}
#define EncryptMessage_init_zero                 {false, {0, {0}}, false, {0, {0}}, false, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}, false, ""}
#define EncryptedMessage_init_zero               {false, {0, {0}}, false, {0, {0}}, false, {0, {0}}}
#define DecryptMessage_init_zero                 {0, {0, 0, 0, 0, 0, 0, 0, 0}, false, {0, {0}}, false, {0, {0}}, false, {0, {0}}}
#define DecryptedMessage_init_zero               {false, {0, {0}}, false, ""}
#define CipherKeyValue_init_zero                 {0, {0, 0, 0, 0, 0, 0, 0, 0}, false, "", false, {0, {0}}, false, 0, false, 0, false, 0, false, {0, {0}}}
#define CipheredKeyValue_init_zero               {false, {0, {0}}}
#define EstimateTxSize_init_zero                 {0, 0, {{NULL}, NULL}}
#define TxSize_init_zero                         {false, 0}
#define SignTx_init_zero                         {0, 0, false, "", false, 0, false, 0, false, 0, false, 0, false, 0}
#define SimpleSignTx_init_zero                   {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0}
#define TxRequest_init_zero                      {false, _RequestType_MIN, false, TxRequestDetailsType_init_zero, false, TxRequestSerializedType_init_zero}
#define TxAck_init_zero                          {false, TransactionType_init_zero}
#define RawTxAck_init_zero                       {false, RawTransactionType_init_zero}
#define EthereumSignTx_init_zero                 {0, {0, 0, 0, 0, 0, 0, 0, 0}, false, {0, {0}}, false, {0, {0}}, false, {0, {0}}, false, {0, {0}}, false, {0, {0}}, false, {0, {0}}, false, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}, false, _OutputAddressType_MIN, false, ExchangeType_init_zero, false, 0, false, {0, {0}}, false, {0, {0}}, false, "", false, 0}
#define EthereumTxRequest_init_zero              {false, 0, false, 0, false, {0, {0}}, false, {0, {0}}, false, {0, {0}}, false, {0, {0}}}
#define EthereumTxAck_init_zero                  {false, {0, {0}}}
#define EthereumSignMessage_init_zero            {0, {0, 0, 0, 0, 0, 0, 0, 0}, {0, {0}}}
#define EthereumVerifyMessage_init_zero          {false, {0, {0}}, false, {0, {0}}, false, {0, {0}}}
#define EthereumMessageSignature_init_zero       {false, {0, {0}}, false, {0, {0}}}
#define SignIdentity_init_zero                   {false, IdentityType_init_zero, false, {0, {0}}, false, "", false, ""}
#define SignedIdentity_init_zero                 {false, "", false, {0, {0}}, false, {0, {0}}}
#define ApplyPolicies_init_zero                  {0, {PolicyType_init_zero, PolicyType_init_zero, PolicyType_init_zero, PolicyType_init_zero, PolicyType_init_zero, PolicyType_init_zero, PolicyType_init_zero, PolicyType_init_zero, PolicyType_init_zero, PolicyType_init_zero, PolicyType_init_zero, PolicyType_init_zero, PolicyType_init_zero, PolicyType_init_zero, PolicyType_init_zero, PolicyType_init_zero}}
#define FlashHash_init_zero                      {false, 0, false, 0, false, {0, {0}}}
#define FlashWrite_init_zero                     {false, 0, false, {0, {0}}, false, 0}
#define FlashHashResponse_init_zero              {false, {0, {0}}}
#define DebugLinkFlashDump_init_zero             {false, 0, false, 0}
#define DebugLinkFlashDumpResponse_init_zero     {false, {0, {0}}}
#define SoftReset_init_zero                      {0}
#define FirmwareErase_init_zero                  {0}
#define FirmwareUpload_init_zero                 {{0, {0}}, {0, {0}}}
#define DebugLinkDecision_init_zero              {0}
#define DebugLinkGetState_init_zero              {0}
#define DebugLinkState_init_zero                 {false, {0, {0}}, false, "", false, "", false, "", false, HDNodeType_init_zero, false, 0, false, "", false, {0, {0}}, false, "", false, 0, false, "", false, "", false, {0, {0}}, false, {0, {0}}}
#define DebugLinkStop_init_zero                  {0}
#define DebugLinkLog_init_zero                   {false, 0, false, "", false, ""}
#define DebugLinkFillConfig_init_zero            {0}

/* Field tags (for use in manual encoding/decoding) */
#define Address_address_tag                      1
#define ApplyPolicies_policy_tag                 1
#define ApplySettings_language_tag               1
#define ApplySettings_label_tag                  2
#define ApplySettings_use_passphrase_tag         3
#define ApplySettings_auto_lock_delay_ms_tag     4
#define ApplySettings_u2f_counter_tag            5
#define ButtonRequest_code_tag                   1
#define ButtonRequest_data_tag                   2
#define ChangePin_remove_tag                     1
#define CharacterAck_character_tag               1
#define CharacterAck_delete_tag                  2
#define CharacterAck_done_tag                    3
#define CharacterRequest_word_pos_tag            1
#define CharacterRequest_character_pos_tag       2
#define CipherKeyValue_address_n_tag             1
#define CipherKeyValue_key_tag                   2
#define CipherKeyValue_value_tag                 3
#define CipherKeyValue_encrypt_tag               4
#define CipherKeyValue_ask_on_encrypt_tag        5
#define CipherKeyValue_ask_on_decrypt_tag        6
#define CipherKeyValue_iv_tag                    7
#define CipheredKeyValue_value_tag               1
#define CoinTable_table_tag                      1
#define CoinTable_num_coins_tag                  2
#define CoinTable_chunk_size_tag                 3
#define DebugLinkDecision_yes_no_tag             1
#define DebugLinkFlashDump_address_tag           1
#define DebugLinkFlashDump_length_tag            2
#define DebugLinkFlashDumpResponse_data_tag      1
#define DebugLinkLog_level_tag                   1
#define DebugLinkLog_bucket_tag                  2
#define DebugLinkLog_text_tag                    3
#define DebugLinkState_layout_tag                1
#define DebugLinkState_pin_tag                   2
#define DebugLinkState_matrix_tag                3
#define DebugLinkState_mnemonic_tag              4
#define DebugLinkState_node_tag                  5
#define DebugLinkState_passphrase_protection_tag 6
#define DebugLinkState_reset_word_tag            7
#define DebugLinkState_reset_entropy_tag         8
#define DebugLinkState_recovery_fake_word_tag    9
#define DebugLinkState_recovery_word_pos_tag     10
#define DebugLinkState_recovery_cipher_tag       11
#define DebugLinkState_recovery_auto_completed_word_tag 12
#define DebugLinkState_firmware_hash_tag         13
#define DebugLinkState_storage_hash_tag          14
#define DecryptMessage_address_n_tag             1
#define DecryptMessage_nonce_tag                 2
#define DecryptMessage_message_tag               3
#define DecryptMessage_hmac_tag                  4
#define DecryptedMessage_message_tag             1
#define DecryptedMessage_address_tag             2
#define EncryptMessage_pubkey_tag                1
#define EncryptMessage_message_tag               2
#define EncryptMessage_display_only_tag          3
#define EncryptMessage_address_n_tag             4
#define EncryptMessage_coin_name_tag             5
#define EncryptedMessage_nonce_tag               1
#define EncryptedMessage_message_tag             2
#define EncryptedMessage_hmac_tag                3
#define Entropy_entropy_tag                      1
#define EntropyAck_entropy_tag                   1
#define EstimateTxSize_outputs_count_tag         1
#define EstimateTxSize_inputs_count_tag          2
#define EstimateTxSize_coin_name_tag             3
#define EthereumAddress_address_tag              1
#define EthereumGetAddress_address_n_tag         1
#define EthereumGetAddress_show_display_tag      2
#define EthereumMessageSignature_address_tag     1
#define EthereumMessageSignature_signature_tag   2
#define EthereumSignMessage_address_n_tag        1
#define EthereumSignMessage_message_tag          2
#define EthereumSignTx_address_n_tag             1
#define EthereumSignTx_nonce_tag                 2
#define EthereumSignTx_gas_price_tag             3
#define EthereumSignTx_gas_limit_tag             4
#define EthereumSignTx_to_tag                    5
#define EthereumSignTx_value_tag                 6
#define EthereumSignTx_data_initial_chunk_tag    7
#define EthereumSignTx_data_length_tag           8
#define EthereumSignTx_to_address_n_tag          9
#define EthereumSignTx_address_type_tag          10
#define EthereumSignTx_exchange_type_tag         11
#define EthereumSignTx_chain_id_tag              12
#define EthereumSignTx_token_value_tag           100
#define EthereumSignTx_token_to_tag              101
#define EthereumSignTx_token_shortcut_tag        102
#define EthereumSignTx_tx_type_tag               103
#define EthereumTxAck_data_chunk_tag             1
#define EthereumTxRequest_data_length_tag        1
#define EthereumTxRequest_signature_v_tag        2
#define EthereumTxRequest_signature_r_tag        3
#define EthereumTxRequest_signature_s_tag        4
#define EthereumTxRequest_hash_tag               5
#define EthereumTxRequest_signature_der_tag      6
#define EthereumVerifyMessage_address_tag        1
#define EthereumVerifyMessage_signature_tag      2
#define EthereumVerifyMessage_message_tag        3
#define Failure_code_tag                         1
#define Failure_message_tag                      2
#define Features_vendor_tag                      1
#define Features_major_version_tag               2
#define Features_minor_version_tag               3
#define Features_patch_version_tag               4
#define Features_bootloader_mode_tag             5
#define Features_device_id_tag                   6
#define Features_pin_protection_tag              7
#define Features_passphrase_protection_tag       8
#define Features_language_tag                    9
#define Features_label_tag                       10
#define Features_coins_tag                       11
#define Features_initialized_tag                 12
#define Features_revision_tag                    13
#define Features_bootloader_hash_tag             14
#define Features_imported_tag                    15
#define Features_pin_cached_tag                  16
#define Features_passphrase_cached_tag           17
#define Features_policies_tag                    18
#define Features_model_tag                       21
#define Features_firmware_variant_tag            22
#define Features_firmware_hash_tag               23
#define Features_no_backup_tag                   24
#define FirmwareUpload_payload_hash_tag          1
#define FirmwareUpload_payload_tag               2
#define FlashHash_address_tag                    1
#define FlashHash_length_tag                     2
#define FlashHash_challenge_tag                  3
#define FlashHashResponse_data_tag               1
#define FlashWrite_address_tag                   1
#define FlashWrite_data_tag                      2
#define FlashWrite_erase_tag                     3
#define GetAddress_address_n_tag                 1
#define GetAddress_coin_name_tag                 2
#define GetAddress_show_display_tag              3
#define GetAddress_multisig_tag                  4
#define GetAddress_script_type_tag               5
#define GetCoinTable_start_tag                   1
#define GetCoinTable_end_tag                     2
#define GetEntropy_size_tag                      1
#define GetPublicKey_address_n_tag               1
#define GetPublicKey_ecdsa_curve_name_tag        2
#define GetPublicKey_show_display_tag            3
#define GetPublicKey_coin_name_tag               4
#define GetPublicKey_script_type_tag             5
#define LoadDevice_mnemonic_tag                  1
#define LoadDevice_node_tag                      2
#define LoadDevice_pin_tag                       3
#define LoadDevice_passphrase_protection_tag     4
#define LoadDevice_language_tag                  5
#define LoadDevice_label_tag                     6
#define LoadDevice_skip_checksum_tag             7
#define LoadDevice_u2f_counter_tag               8
#define MessageSignature_address_tag             1
#define MessageSignature_signature_tag           2
#define PassphraseAck_passphrase_tag             1
#define PinMatrixAck_pin_tag                     1
#define PinMatrixRequest_type_tag                1
#define Ping_message_tag                         1
#define Ping_button_protection_tag               2
#define Ping_pin_protection_tag                  3
#define Ping_passphrase_protection_tag           4
#define PublicKey_node_tag                       1
#define PublicKey_xpub_tag                       2
#define RawTxAck_tx_tag                          1
#define RecoveryDevice_word_count_tag            1
#define RecoveryDevice_passphrase_protection_tag 2
#define RecoveryDevice_pin_protection_tag        3
#define RecoveryDevice_language_tag              4
#define RecoveryDevice_label_tag                 5
#define RecoveryDevice_enforce_wordlist_tag      6
#define RecoveryDevice_use_character_cipher_tag  7
#define RecoveryDevice_auto_lock_delay_ms_tag    8
#define RecoveryDevice_u2f_counter_tag           9
#define RecoveryDevice_dry_run_tag               10
#define ResetDevice_display_random_tag           1
#define ResetDevice_strength_tag                 2
#define ResetDevice_passphrase_protection_tag    3
#define ResetDevice_pin_protection_tag           4
#define ResetDevice_language_tag                 5
#define ResetDevice_label_tag                    6
#define ResetDevice_no_backup_tag                7
#define ResetDevice_auto_lock_delay_ms_tag       8
#define SignIdentity_identity_tag                1
#define SignIdentity_challenge_hidden_tag        2
#define SignIdentity_challenge_visual_tag        3
#define SignIdentity_ecdsa_curve_name_tag        4
#define SignMessage_address_n_tag                1
#define SignMessage_message_tag                  2
#define SignMessage_coin_name_tag                3
#define SignMessage_script_type_tag              4
#define SignTx_outputs_count_tag                 1
#define SignTx_inputs_count_tag                  2
#define SignTx_coin_name_tag                     3
#define SignTx_version_tag                       4
#define SignTx_lock_time_tag                     5
#define SignTx_expiry_tag                        6
#define SignTx_overwintered_tag                  7
#define SignTx_version_group_id_tag              8
#define SignedIdentity_address_tag               1
#define SignedIdentity_public_key_tag            2
#define SignedIdentity_signature_tag             3
#define SimpleSignTx_inputs_tag                  1
#define SimpleSignTx_outputs_tag                 2
#define SimpleSignTx_transactions_tag            3
#define SimpleSignTx_coin_name_tag               4
#define SimpleSignTx_version_tag                 5
#define SimpleSignTx_lock_time_tag               6
#define SimpleSignTx_expiry_tag                  7
#define SimpleSignTx_overwintered_tag            8
#define Success_message_tag                      1
#define TxAck_tx_tag                             1
#define TxRequest_request_type_tag               1
#define TxRequest_details_tag                    2
#define TxRequest_serialized_tag                 3
#define TxSize_tx_size_tag                       1
#define VerifyMessage_address_tag                1
#define VerifyMessage_signature_tag              2
#define VerifyMessage_message_tag                3
#define VerifyMessage_coin_name_tag              4
#define WordAck_word_tag                         1

/* Struct field encoding specification for nanopb */
extern const pb_field_t Initialize_fields[1];
extern const pb_field_t GetFeatures_fields[1];
extern const pb_field_t Features_fields[23];
extern const pb_field_t GetCoinTable_fields[3];
extern const pb_field_t CoinTable_fields[4];
extern const pb_field_t ClearSession_fields[1];
extern const pb_field_t ApplySettings_fields[6];
extern const pb_field_t ChangePin_fields[2];
extern const pb_field_t Ping_fields[5];
extern const pb_field_t Success_fields[2];
extern const pb_field_t Failure_fields[3];
extern const pb_field_t ButtonRequest_fields[3];
extern const pb_field_t ButtonAck_fields[1];
extern const pb_field_t PinMatrixRequest_fields[2];
extern const pb_field_t PinMatrixAck_fields[2];
extern const pb_field_t Cancel_fields[1];
extern const pb_field_t PassphraseRequest_fields[1];
extern const pb_field_t PassphraseAck_fields[2];
extern const pb_field_t GetEntropy_fields[2];
extern const pb_field_t Entropy_fields[2];
extern const pb_field_t GetPublicKey_fields[6];
extern const pb_field_t PublicKey_fields[3];
extern const pb_field_t GetAddress_fields[6];
extern const pb_field_t EthereumGetAddress_fields[3];
extern const pb_field_t Address_fields[2];
extern const pb_field_t EthereumAddress_fields[2];
extern const pb_field_t WipeDevice_fields[1];
extern const pb_field_t LoadDevice_fields[9];
extern const pb_field_t ResetDevice_fields[9];
extern const pb_field_t EntropyRequest_fields[1];
extern const pb_field_t EntropyAck_fields[2];
extern const pb_field_t RecoveryDevice_fields[11];
extern const pb_field_t WordRequest_fields[1];
extern const pb_field_t WordAck_fields[2];
extern const pb_field_t CharacterRequest_fields[3];
extern const pb_field_t CharacterAck_fields[4];
extern const pb_field_t SignMessage_fields[5];
extern const pb_field_t VerifyMessage_fields[5];
extern const pb_field_t MessageSignature_fields[3];
extern const pb_field_t EncryptMessage_fields[6];
extern const pb_field_t EncryptedMessage_fields[4];
extern const pb_field_t DecryptMessage_fields[5];
extern const pb_field_t DecryptedMessage_fields[3];
extern const pb_field_t CipherKeyValue_fields[8];
extern const pb_field_t CipheredKeyValue_fields[2];
extern const pb_field_t EstimateTxSize_fields[4];
extern const pb_field_t TxSize_fields[2];
extern const pb_field_t SignTx_fields[9];
extern const pb_field_t SimpleSignTx_fields[9];
extern const pb_field_t TxRequest_fields[4];
extern const pb_field_t TxAck_fields[2];
extern const pb_field_t RawTxAck_fields[2];
extern const pb_field_t EthereumSignTx_fields[17];
extern const pb_field_t EthereumTxRequest_fields[7];
extern const pb_field_t EthereumTxAck_fields[2];
extern const pb_field_t EthereumSignMessage_fields[3];
extern const pb_field_t EthereumVerifyMessage_fields[4];
extern const pb_field_t EthereumMessageSignature_fields[3];
extern const pb_field_t SignIdentity_fields[5];
extern const pb_field_t SignedIdentity_fields[4];
extern const pb_field_t ApplyPolicies_fields[2];
extern const pb_field_t FlashHash_fields[4];
extern const pb_field_t FlashWrite_fields[4];
extern const pb_field_t FlashHashResponse_fields[2];
extern const pb_field_t DebugLinkFlashDump_fields[3];
extern const pb_field_t DebugLinkFlashDumpResponse_fields[2];
extern const pb_field_t SoftReset_fields[1];
extern const pb_field_t FirmwareErase_fields[1];
extern const pb_field_t FirmwareUpload_fields[3];
extern const pb_field_t DebugLinkDecision_fields[2];
extern const pb_field_t DebugLinkGetState_fields[1];
extern const pb_field_t DebugLinkState_fields[15];
extern const pb_field_t DebugLinkStop_fields[1];
extern const pb_field_t DebugLinkLog_fields[4];
extern const pb_field_t DebugLinkFillConfig_fields[1];

/* Maximum encoded size of messages (where known) */
#define Initialize_size                          0
#define GetFeatures_size                         0
#define Features_size                            (363 + 0*CoinType_size + 4*PolicyType_size)
#define GetCoinTable_size                        12
#define CoinTable_size                           (156 + 24*CoinType_size)
#define ClearSession_size                        0
#define ApplySettings_size                       68
#define ChangePin_size                           2
#define Ping_size                                265
#define Success_size                             259
#define Failure_size                             261
#define ButtonRequest_size                       261
#define ButtonAck_size                           0
#define PinMatrixRequest_size                    2
#define PinMatrixAck_size                        12
#define Cancel_size                              0
#define PassphraseRequest_size                   0
#define PassphraseAck_size                       53
#define GetEntropy_size                          6
#define Entropy_size                             1027
#define GetPublicKey_size                        109
#define PublicKey_size                           (121 + HDNodeType_size)
#define GetAddress_size                          (81 + MultisigRedeemScriptType_size)
#define EthereumGetAddress_size                  50
#define Address_size                             133
#define EthereumAddress_size                     22
#define WipeDevice_size                          0
#define LoadDevice_size                          (326 + HDNodeType_size)
#define ResetDevice_size                         74
#define EntropyRequest_size                      0
#define EntropyAck_size                          131
#define RecoveryDevice_size                      82
#define WordRequest_size                         0
#define WordAck_size                             14
#define CharacterRequest_size                    12
#define CharacterAck_size                        8
#define SignMessage_size                         1100
#define VerifyMessage_size                       1250
#define MessageSignature_size                    200
#define EncryptMessage_size                      1135
#define EncryptedMessage_size                    1168
#define DecryptMessage_size                      1216
#define DecryptedMessage_size                    1160
#define CipherKeyValue_size                      1358
#define CipheredKeyValue_size                    1027
/* EstimateTxSize_size depends on runtime parameters */
#define TxSize_size                              6
#define SignTx_size                              61
/* SimpleSignTx_size depends on runtime parameters */
#define TxRequest_size                           (14 + TxRequestDetailsType_size + TxRequestSerializedType_size)
#define TxAck_size                               (6 + TransactionType_size)
#define RawTxAck_size                            (6 + RawTransactionType_size)
#define EthereumSignTx_size                      (1377 + ExchangeType_size)
#define EthereumTxRequest_size                   189
#define EthereumTxAck_size                       1027
#define EthereumSignMessage_size                 1075
#define EthereumVerifyMessage_size               1116
#define EthereumMessageSignature_size            89
#define SignIdentity_size                        (558 + IdentityType_size)
#define SignedIdentity_size                      235
#define ApplyPolicies_size                       (96 + 16*PolicyType_size)
#define FlashHash_size                           46
#define FlashWrite_size                          1035
#define FlashHashResponse_size                   34
#define DebugLinkFlashDump_size                  12
#define DebugLinkFlashDumpResponse_size          1027
#define SoftReset_size                           0
#define FirmwareErase_size                       0
#define FirmwareUpload_size                      36
#define DebugLinkDecision_size                   2
#define DebugLinkGetState_size                   0
#define DebugLinkState_size                      (1701 + HDNodeType_size)
#define DebugLinkStop_size                       0
#define DebugLinkLog_size                        300
#define DebugLinkFillConfig_size                 0

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define MESSAGES_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
